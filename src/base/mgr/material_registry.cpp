//
// Created by Zero on 2023/8/6.
//

#include "material_registry.h"
#include "pipeline.h"

namespace vision {

OC_MAKE_INSTANCE_FUNC_DEF_WITH_HOTFIX(MaterialRegistry, s_material_registry)

SP<Material> MaterialRegistry::register_(SP<vision::Material> material) noexcept {
    uint64_t hash = material->hash();
    auto iter = std::find_if(materials_.begin(), materials_.end(), [&](SP<Material> mat) {
        return mat->hash() == hash;
    });
    if (iter == materials_.cend()) {
        materials_.push_back(material);
        return material;
    }
    return *iter;
}

SP<Material> MaterialRegistry::get_material(uint64_t hash) noexcept {
    auto iter = std::find_if(materials_.begin(), materials_.end(), [&](SP<Material> mat) {
        return mat->hash() == hash;
    });
    if (iter == materials_.cend()) {
        return nullptr;
    }
    return *iter;
}

void MaterialRegistry::push_back(SP<vision::Material> material) noexcept {
    materials_.push_back(ocarina::move(material));
}

bool MaterialRegistry::has_dispersive() const noexcept {
    return std::any_of(materials_.begin(), materials_.end(),
                       [&](const SP<Material> &mat) {
                           return mat->is_dispersive();
                       });
}

void MaterialRegistry::upload_device_data() noexcept {
    if (has_changed()) {
        materials_.update();
    }
}

void MaterialRegistry::prepare() noexcept {
    materials().for_each_instance([&](const SP<Material> &material) noexcept {
        material->prepare();
    });
    auto rp = Global::instance().pipeline();
    materials().prepare(rp->bindless_array(), rp->device());
}

void MaterialRegistry::remedy() noexcept {
    materials().remedy();
    auto rp = Global::instance().pipeline();
    materials().prepare(rp->bindless_array(), rp->device());
}

bool MaterialRegistry::render_UI(ocarina::Widgets *widgets) noexcept {
    bool open = widgets->use_folding_header("materials", [&] {
        uint type_num = materials_.type_num();
        widgets->text(ocarina::format("type num is {}", type_num));
        materials_.render_UI(widgets);
    });
    return open;
}

void MaterialRegistry::update_runtime_object(const IObjectConstructor *constructor) noexcept {
    for (int i = 0; i < materials_.size(); ++i) {
        SP<Material> material = materials_[i];
        if (!constructor->match(material.get())) {
            continue;
        }
        SP<Material> new_material = constructor->construct_shared<Material>();
        new_material->restore(material.get());
        materials_.replace(i, new_material);
    }
}

namespace detail {
[[nodiscard]] std::string second_to_time(double f_total_seconds) {
    int total_seconds = floor(f_total_seconds);
    float decimal = f_total_seconds - total_seconds;
    int minutes = total_seconds / 60;
    int seconds = total_seconds % 60;
    std::ostringstream oss;
    oss << minutes << ":" << std::setw(2)
        << std::setfill('0')
        << ocarina::format("{:.3f}", seconds + decimal);
    return oss.str();
}

[[nodiscard]] std::string current_date_time() noexcept {
    auto now = std::chrono::system_clock::now();
    std::time_t now_time_t = std::chrono::system_clock::to_time_t(now);
    std::tm *local_time = std::localtime(&now_time_t);
    auto time_str = std::put_time(local_time, "%Y-%m-%d %H:%M:%S");
    std::ostringstream oss;
    oss << time_str;
    return oss.str();
}
}// namespace detail

void MaterialRegistry::precompute_albedo() noexcept {
    vector<PrecomputedLobeTable> configs;

    Clock clock;
    clock.start();
    materials_.for_each_instance([&](SP<Material> material, uint i) {
        auto lst = material->precompute();
        configs.insert(configs.end(), lst.begin(), lst.end());
    });
    clock.end();

    string fn = "precomputed_table.inl.h";
    fs::path target_path = FileTool::project_src_path() / "base" / "scattering" / fn;
    std::ofstream output(target_path);

    output << ocarina::format("\n// this file was generated by vision-precompute.exe at {}\n", detail::current_date_time());
    string elapse_time = detail::second_to_time(clock.elapse_s());
    output << ocarina::format("// the number of sample is {}, it took {} s\n",
                              Material::precompute_sample_num, elapse_time);
    output << "// please do not manually modify \n\n";
    output << "#pragma once \n"
           << std::endl;
    output << "#include \"math/basic_types.h\" \n\n";
    output << "namespace vision { \n";
    output << "using namespace ocarina;\n";
    for (const PrecomputedLobeTable &table : configs) {
        output << table.to_string() << std::endl
               << std::endl;
    }
    output << "} //namespace";
    output.close();
}

void MaterialRegistry::tidy_up() noexcept {
    materials_.for_each_instance([&](SP<Material> material, uint i) {
        material->set_index(i);
    });
}

void MaterialRegistry::remove_unused_materials() noexcept {
    for (auto iter = materials_.begin(); iter != materials_.end();) {
        if (iter->use_count() == 1) {
            iter = materials_.erase(iter);
        } else {
            ++iter;
        }
    }
    tidy_up();
}


}// namespace vision